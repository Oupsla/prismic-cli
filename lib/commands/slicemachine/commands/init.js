import { readFileSync, writeFileSync } from "fs";
import inquirer from "inquirer";
import consola from "consola";
import shell from "shelljs";
import path from "path";
import { spawn } from "child_process";
import AdmZip from "adm-zip";
import Mustache from "mustache";
import Helpers from "../../../helpers";
import Repository from "../../repository";
import Authentication from "../../authentication";
import SliceMachine from "../slicemachine";
import createEndpoints from "../misc/createEndpoints";
import { ctx } from "../../../context";

const renderText = (file, vars) =>
  Mustache.render(
    readFileSync(path.join(__dirname, "..", "misc", "templates", file), "utf8"),
    vars
  );

renderText("sl.mustache", {});

async function promptForPrismicApp() {
  const question = {
    type: "list",
    name: "choice",
    message:
      "Hey! It seems you already have a Prismic configuration file.\nHow would you like to proceed?\n",
    choices: [
      {
        name: "Don't overwrite my configuration",
        value: "dont"
      },
      {
        name:
          "Create a new Prismic repo anyway (will overwrite your Prismic config file)",
        value: "do"
      }
    ]
  };
  const { choice } = await inquirer.prompt([question]);
  return choice === "do";
}

async function createApp(bootstraper, frameworkName, skipDisplay) {
  if (!skipDisplay) {
    consola.info(`STEP ONE: create a ${frameworkName} app.\nFirst timer? don't worry: basic configuration is fine.\n`)
  }
  const { projectName } = await inquirer.prompt([
    {
      type: "input",
      name: "projectName",
      message: "Where should we create your app? Folder name:",
      validate(value) {
        return new RegExp("^[\\-\\w]+$").test(value)
          ? true
          : "Your project name can only contain alphanumeric characters, underscores or dashes";
      }
    }
  ]);
  return new Promise((resolve, reject) => {
    const [command, args] = bootstraper;
    try {
      const child = spawn(command, [...args, projectName], {
        stdio: "inherit"
      });
      child.on("close", async code => {
        if (code === 0) {
          return resolve(projectName);
        }
        return reject(
          new Error(`Something went wrong with command "${command}"`)
        );
      });
    } catch (e) {
      reject(
        new Error(
          `Could not launch command "${command}".\nIf you are a Windows user, it is likely caused by npx not being installed on your machine.`
        )
      );
    }
  }).catch(err => {
    consola.error(err);
    return new Error();
  });
}

async function createPrismicRepo(customTypes) {
  const domain = await Repository.chooseDomain();
  await Authentication.connect();
  return await Repository.createWithDomain({
    domain,
    customTypes
  });
}

function handleDependencies(protocol) {
  const { dependencies, devDependencies } = protocol;
  if (dependencies && Array.isArray(dependencies)) {
    shell.exec(`npm i --save ${dependencies.join(" ")}`);
  }
  if (devDependencies && Array.isArray(devDependencies)) {
    shell.exec(`npm i --save-dev ${devDependencies.join(" ")}`);
  }
}

// Should we prompt or not? Ask Renaud
const SHOULD_PROMPT = false;
const prompt = () => true;

const shouldOverWrite = (action, projectIsBootstrapped) => {
  const { overwrite, bootstrapped } = action;
  return overwrite || (bootstrapped && projectIsBootstrapped);
};

/**
 * If path should always be overwritten or path to file does nor exist
 * Or file exists but it was just boostrapped by npx create-app.
 * Alternatively, prompt the user to decide
 * @param  {Object} action The action as stored in protocol.json
 * @return {Boolean}        Yes or no?
 */
const shouldWritePath = (action, projectIsBootstrapped) => {
  const { zipPath, writePath } = action;
  return (
    shell.test("-e", writePath || zipPath) === false ||
    shouldOverWrite(action, projectIsBootstrapped) ||
    (SHOULD_PROMPT && prompt())
  );
};

/**
 * Takes an array of actions (mainly "write") from protocol
 * and executes them sequentially, based on specification + project boostrapped or not
 * @param  {Zip}  zip            zip instance
 * @param  {Array}  actions        Array of actions to perform over the project
 * @param  {Object}  info        Data generated by project (eg. magic link)
 * @param  {Boolean} isBootstrapped Was the project bootstrapped by us?
 * @return {null}                 No return
 */
function handleActions(zip, actions, info, isBootstrapped) {
  actions.forEach(action => {
    const { template, type: actionType, zipPath } = action;
    if (actionType && actionType === "delete") {
      return zip.deleteFile(zipPath);
    }
    const shouldWrite = shouldWritePath(action, isBootstrapped);
    if (shouldWrite) {
      if (template) {
        // read: if file is a template
        const f = Mustache.render(zip.readAsText(zipPath, "utf8"), info);
        return writeFileSync(zipPath, f, "utf8");
      }
      zip.extractEntryTo(
        zipPath, // entry (path to)
        "./", // targetPath
        true, // maintainEntryPath?
        shouldOverWrite(action, isBootstrapped) // overwrite?
      );
      zip.deleteFile(zipPath);
    }
    return null;
  });
}

function writePrismicConfig(zip, fileName, { domain, base }) {
  const pattern = /http(s)?:\/\/.*(\.cdn)?\..*\..*\/api(\/v2)?/;

  const matches = base
    ? base.match(/(https?:\/\/)(.*)/)
    : ["http://", "prismic-url-not-found"];
  const protocol = matches[1];
  const url = matches[2];

  const f = zip.readAsText(fileName, "utf8");
  const apiBase = `${protocol}${domain}.${url}`;
  const apiUrl = `${apiBase}/api/v2`;
  const documentsUrl = `${apiBase}/documents`;
  zip.deleteFile(fileName);
  writeFileSync(fileName, f.replace(pattern, apiUrl), "utf8");
  return { apiUrl, documentsUrl };
}

function recap(protocol, info) {
  shell.exec("clear");

  const additionalDisplay = Mustache.render(protocol.additionalDisplay, {
    ...protocol,
    ...info,
    apiEndpoint: info.newPrismicRepo.apiUrl
  });

  Helpers.UI.display(`\n\n${additionalDisplay}`);
}

function clean(zip, protocol) {
  zip.deleteFile(protocol.pathToMergedSlices);
  zip.deleteFile("protocol.json");
}

const testProject = (tests, projectPath = "./") =>
  tests.find(e => shell.test(e.arg, `${projectPath}${e.path}`) === false);

async function init() {
  const framework = ctx.SliceMachine.framework || "nuxt";
  const info = {};

  Helpers.UI.display(renderText("sm-intro.mustache"));

  try {
    const Endpoints = createEndpoints();
    const endpoint = Endpoints.SliceMachine.slices();
    const maybeZipPath = await SliceMachine.downloadSlices(endpoint, {
      framework,
      ...(ctx.SliceMachine.isDemo ? { demo: true } : {})
    });
    if (maybeZipPath && maybeZipPath instanceof Error === false) {
      const zip = new AdmZip(maybeZipPath);
      const protocol = JSON.parse(zip.readAsText("protocol.json"));

      /**
       * Beginning of us starting testing then creating app.
       * If we are in a given project (eg. Nuxt), continue.
       * If not, get bootstraper for given app (eg. Nuxt),
       * launch the command then cd to created directory.
       * If we are in a Nuxt project, everything went fine.
       * If not, we can't continue and exit the process.
       */

      const maybeFail = testProject(protocol.projectTests);
      // This line is not clear and flow should be rethink
      if (!ctx.SliceMachine.skipBootstraper && (maybeFail || ctx.SliceMachine.isNew)) {
        const { bootstraper, frameworkName, projectTests } = protocol;
        const res = await createApp(bootstraper, frameworkName);
        if (res instanceof Error) {
          return Helpers.UI.display("Exiting...");
        }
        info.projectName = res;
        shell.cd(res);
        const failAgain = testProject(projectTests);
        if (failAgain) {
          return Helpers.UI.display(
            `It seems we were not able to cd to your new ${frameworkName} project.\nReason: ${maybeFail.reason}`
          );
        }

        info.isBootstrapped = true;
        shell.exec("clear");
      }

      /** ------
       *  1/3 Beginning of us testing and creating Prismic repository
       ** -------*/

      /**
       *  If project is new or no Prismic config was found or user agreed to override,
       *  parse the custom_types merged with slices, then create Prismic repository.
       *  Then, read prismic config from zip, update it accordingly (domain + base) then write it to fs
       */
      if (
        !ctx.SliceMachine.skipPrismic &&
        (info.isBootstrapped ||
          shell.test('-e', protocol.prismicConfig) === false ||
          (await promptForPrismicApp()))
      ) {

        const congrats = info.isBootstrapped ? `Congrats! Your ${protocol.frameworkName} app is created.\n` : ''
        consola.success(`${congrats}Next step: create a Prismic repository. It will hold your content and pages.`)

        const ct = JSON.parse(zip.readAsText(protocol.pathToMergedSlices));
        const { domain, magicUrl } = await createPrismicRepo(ct);
        const urls = writePrismicConfig(zip, protocol.prismicConfig, {
          domain,
          base: ctx.base
        });

        info.magicUrl = magicUrl;
        info.prismicDomain = domain;
        info.newPrismicRepo = urls;
      }

      // Handle downloaded files
      // Qucik fix for magil link before re-write
      handleActions(
        zip,
        protocol.actions,
        info,
        info.isBootstrapped || ctx.SliceMachine.override,
      );

      /**
       * Handle npm dev + dependencies
       */
      Helpers.UI.display(renderText("initStep3.mustache"));
      handleDependencies(protocol);

      /**
       * Remove zipped files that should not stay there.
       * We maybe could mention them in actions.
       */
      clean(zip, protocol);

      zip.extractAllTo(path.join("./", "sliceMachine"), true);

      return recap(protocol, info);
    }
    throw new Error(
      "An error occured. We did not manage to query your slices.\nContact us maybe? Now exiting..."
    );
  } catch (e) {
    return Helpers.UI.display(e);
  }
}

export default true;
export { init };
